<%= ERB.new(File.read(File.expand_path("_header.erb",File.dirname(file)))).result(binding) -%>
#
# The qpage configuration file is made up of keyword=value pairs:
#
#	administrator=<administrator's e-mail address>
#
#	forcehostname=<"yes", "no", or @mailhost>
#
#	queuedir=<queue directory>
#
#	lockdir=<lock directory>
#
#	identtimeout=<seconds to wait before giving up on ident query>
#
#	snpptimeout=<seconds to wait before giving up on SNPP commands>
#
#	include=<filename containing more configuration keywords>
#
#	pidfile=<filename to write the server's process ID>
#
#	synchronous=<"yes" or "no" to start queue runs immediately>
#
#	modem=<modem name>
#		text=<optional text, no whitespace allowed>
#		device=<modem device e.g. /dev/ttya>
#		initcmd=<modem initialization command>
#		dialcmd=<modem dial command not including phone number>
#
#	service=<service name>
#		text=<optional text, no whitespace allowed>
#		device=<name of modem as specified above>
#		phone=<phone number of paging service>
#		password=<password for logging into paging terminal>
#		baudrate=<speed to use while talking to modem>
#		parity=<"even", "odd", or "none">
#		maxmsgsize=<biggest message the paging service will accept>
#		maxpages=<how many pages to send before truncating message>
#		maxtries=<number of tries before page fails
#		identfrom=<"yes" or "no" to use rfc1413 as default CALLerid>
#		allowpid=<"yes" or "no" to require pager entry in qpage.cf>
#		msgprefix=<"yes" or "no" to include sender's name in message>
#
#	pager=<pager name>
#		text=<optional text, no whitespace allowed>
#		pagerid=<numerical pager ID>
#		service=<name of paging service as specified above>
#
#	group=<group name>
#		text=<optional text, no whitespace allowed>
#		member=<pagerid>[/schedule]
#
# Keyword values may not contain whitespace.  Major keywords (administrator,
# modem, pager, etc.) must start at the left column.  Minor keywords (text,
# device, etc.) must not start at the left column (i.e. they must be
# preceeded by whitespace).  Minor keywords may start on the same line
# as their corresponding major keyword as long as there is at least one
# space between the major keyword value and the minor keyword name.
#
# "true" or "false" may be specified instead of "yes" or "no"
#
# All text following a pound sign (#) is ignored.
#

<% if @administrator and !@administrator.empty? -%>
administrator=<%= @administrator %>
<% end -%>
<% if @forcehostname and !@forcehostname.empty? -%>
forcehostname=<%= @forcehostname %>
<% end -%>
<% if @identtimeout and !@identtimeout.empty? -%>
identtimeout=<%= @identtimeout %>
<% end -%>
<% if @snpptimeout and !@snpptimeout.empty? -%>
snpptimeout=<%= @snpptimeout %>
<% end -%>
<% if @pidfile and !@pidfile.empty? -%>
pidfile=<%= @pidfile %>
<% end -%>
<% if @synchronous and !@synchronous.empty? -%>
synchronous=<%= @synchronous %>
<% end -%>
<% if @sigfile and !@sigfile.empty? -%>
sigfile=<%= @sigfile %>
<% end -%>
<% if @queuedir and !@queuedir.empty? -%>
queuedir=<%= @queuedir %>
<% end -%>
<% if @lockdir and !@lockdir.empty? -%>
lockdir=<%= @lockdir %>
<% end -%>
<% if @modems and @modems.is_a?(Hash) -%>
<% if !@modems.empty? -%>

#
# Modems
#
<% @modems.sort.each do |modem, options| -%>
modem=<%= modem %>
<% options.sort.each do |key, value| -%>
    <%= key %>=<%= value %>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% if @service_defs and @service_defs.is_a?(Hash) -%>
<% if !@service_defs.empty? -%>

#
# Services
#
<% @service_defs.sort.each do |service, options| -%>
service=<%= service %>
<% options.sort.each do |key, value| -%>
    <%= key %>=<%= value %>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% if @pagers and @pagers.is_a?(Hash) -%>
<% if !@pagers.empty? -%>

#
# Pagers
#
<% @pagers.sort.each do |pager, options| -%>
pager=<%= pager %>
<% options.sort.each do |key, value| -%>
    <%= key %>=<%= value %>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% if @groups and @groups.is_a?(Hash) -%>
<% if !@groups.empty? -%>

#
# Groups
#
<% @groups.sort.each do |group, options| -%>
group=<%= group %>
    text=<%= @groups[group]['text'] %>
<% if @groups[group]['members'].is_a?(Array) -%>
<% @groups[group]['members'].sort.each do |mem| -%>
    member=<%= mem %>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% if @include and !@include.empty? -%>

include=<%= @include %>
<% end -%>
